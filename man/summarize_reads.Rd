% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check_DNA_contamination.R
\name{summarize_reads}
\alias{summarize_reads}
\title{Summarize reads for different genomic features}
\usage{
summarize_reads(
  metadata = data.frame(sample_name = vector(mode = "character"), BAM_file = vector(mode
    = "character"), group = vector(mode = "character")),
  isPairedEnd = TRUE,
  strandSpecific = 0,
  allowMultiOverlap = FALSE,
  countMultiMappingReads = TRUE,
  fraction = TRUE,
  minMQS = 0,
  saf_list = NULL,
  gtf = NULL,
  threads = 1,
  verbose = FALSE
)
}
\arguments{
\item{metadata}{A data frame with column names: BAM_file, sample_name, and
group. The \emph{BAM_file} column contains the full paths to BAM files;
The \emph{sample_name} and \emph{group} columns contain the unique sample labels,
and the experimental conditions for each sample. The order of the three
columns doesn't matter.}

\item{isPairedEnd}{A logical(1), indicating whether the sequencing data is
paired-end or not.}

\item{strandSpecific}{An integer(1), specifying the strandedness of the
RNA-seq libraries. The possible options are 0 (unstranded), 1 (stranded,
read 1 or single-end read comes from the forward/sense strand) and 2
(reversely stranded, read 1 or single-end read comes from the
reverse/antisense strand).
See \url{https://salmon.readthedocs.io/en/latest/library_type.html} and
\url{https://chipster.csc.fi/manual/library-type-summary.html} for more details
about types of stranded libraries.}

\item{allowMultiOverlap}{A logical(1), indicating if a read is allowed to be
assigned to more than one feature (or meta-feature) if it is found to
overlap with more than one feature (or meta-feature). FALSE by default. A
read (or read pair) will be assigned to the feature (or meta-feature) that
has the largest number of overlapping bases, if the read (or read pair)
overlaps with multiple features (or meta-features).}

\item{countMultiMappingReads}{A logical(1), indicating if multi-mapping
reads/fragments should be counted, TRUE by default. ‘NH’ tag is used to
located multi-mapping reads in the input BAM/SAM files.}

\item{fraction}{A logical(1) indicating if fractional counts are produced for
multi-mapping reads and/or multi-overlapping reads. FALSE by default.}

\item{minMQS}{An integer(1), giving the minimum mapping quality score a read
must satisfy in order to be counted. For paired-end reads, at least one end
should satisfy this criteria. 0 by default.}

\item{saf_list}{A list of data frames containing annotation in the SAF
format, such as the output of the \code{\link[=get_feature_saf]{get_feature_saf()}} function.}

\item{gtf}{A character(1), specifying a path to a GTF file.}

\item{threads}{An integer(1), number of threads for
\code{\link[Rsubread:featureCounts]{Rsubread::featureCounts()}} calling.}

\item{verbose}{A logical(1) vector, indicating if verbose information for
debugging will be generated. This may include information such as unmatched
chromosomes/contigs between reads and annotation.}
}
\value{
A list of lists, each of the sublist contains an output of the
\code{\link[Rsubread:featureCounts]{Rsubread::featureCounts()}} function for each type of genomic features.
For more details of each sublist, see the \emph{value} section of the
documentation for the \code{\link[Rsubread:featureCounts]{Rsubread::featureCounts()}} function.
\describe{
\item{gene}{featureCounts output with a SAF for genes as annotation}
\item{exon}{featureCounts output with a SAF for exons as annotation}
\item{intergenic_region}{featureCounts output with a SAF for intergenic
regions as annotation}
\item{intronic_region}{featureCounts output with a SAF for introns
as annotation}
\item{rRNA}{featureCounts output with a SAF for rRNA exons as annotation}
\item{mitochondrion}{featureCounts output with a SAF for the mitochondrion
as annotation}
\item{chloroplast (optional)}{featureCounts output with a SAF for the
chloroplast as annotation, plant only}
\item{gtf}{featureCounts output with a GTF as annotation}
}
}
\description{
Summarize reads in alignment files, SAM or BAM, to different genomic regions,
such as genic regions, intergenic regions, exonic regions, intronic regions,
rRNA genes, mitochrondrial genome, chloroplast genome (only for plants), and
gene-level exonic regions using \code{\link[Rsubread:featureCounts]{Rsubread::featureCounts()}}.
}
\examples{
if (interactive()){
library(R.utils)
options(timeout = max(3000, getOption("timeout")))
bams <- system.file("extdata",
    "K084CD7PCD1N.srt.bam",
    package = "CleanUpRNAseq"
)

metadata <- data.frame(
    sample_name = "CD1AN_m2_1",
    BAM_file = bams,
    group = "CD1AN"
)

# download the GTF file
gtf_url <- paste0(
    "https://ftp.ensembl.org/pub/release-110/gtf/",
    "homo_sapiens/Homo_sapiens.GRCh38.110.gtf.gz"
)
gtf <- basename(gtf_url)
tmp_dir <- tempdir()
retry_download({download.file(
    url = gtf_url,
    destfile = file.path(tmp_dir, gtf),
    mode = "wb"
)})
gunzip(file.path(tmp_dir, gtf), remove = TRUE)

# download the SAF file
saf_url <- paste0("https://zenodo.org/records/11458839/files/",
                  "hs_saf_list.RData?download=1")
retry_download({download.file(
    url = saf_url,
    destfile = file.path(tmp_dir, "hs_saf_list.RData"),
    mode = "wb"
)})
load(file.path(tmp_dir, "hs_saf_list.RData"))

counts_list <- summarize_reads(
    metadata = metadata,
    isPaired = TRUE,
    strandSpecific = 0,
    saf_list = saf_list,
    gtf = gsub(".gz", "", file.path(tmp_dir, gtf)),
    threads = 1
)
}

}
