% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/correct_for_contamination.R
\name{correct_for_contamination}
\alias{correct_for_contamination}
\title{Correction for gDNA contamination in RNA-seq data}
\usage{
correct_for_contamination(
  is_stranded_library = FALSE,
  salmon_summary = NULL,
  correction_method = c("GC\%", "Global", "IR\%"),
  featurecounts_summary = NULL,
  saf_list = NULL,
  unstranded_metadata = data.frame(sample_name = vector(mode = "character"), group =
    vector(mode = "character"), IR_rate = vector(mode = "numeric"), batch = vector(mode =
    "character")),
  covariates = c("batch", "IR_rate"),
  covariate_types = c("categorical", "numeric"),
  Ensembl_BSgenome = NULL,
  UCSC_BSgenome = NULL,
  genome_version = "GRCh38",
  seqname_alias = data.frame(ucsc = paste0("chr", c(seq_len(22), "X", "Y", "M")), ensembl
    = c(seq_len(22), "X", "Y", "MT")),
  stranded_metadata = data.frame(salmon_quant_file_strand = vector(mode = "character"),
    salmon_quant_file_reverse_strand = vector(mode = "character"), sample_name =
    vector(mode = "character")),
  ensdb_sqlite = NULL
)
}
\arguments{
\item{is_stranded_library}{A logical(1), specifying whether the RNA-seq
library is stranded or not.}

\item{salmon_summary}{A list of matrices containing gene-level abundances,
counts, lengths, such as the output of the \code{\link[=salmon_res]{salmon_res()}} function. For
more details, See \code{\link[tximport:tximport]{tximport::tximport()}}. It can be an element named
\emph{salmon_summary} of the list returned by the \code{\link[=create_diagnostic_plot]{create_diagnostic_plot()}}
function.}

\item{correction_method}{A character(1), specifying a method for correcting
for gDNA contamination in unstranded RNA-seq data. The options are "GC\%",
"Global", "IR\%". This parameter is ignored for stranded RNA-seq data.}

\item{featurecounts_summary}{It can be an element named
\emph{featurecounts_summary} of the list returned by the
\code{\link[=create_diagnostic_plot]{create_diagnostic_plot()}} function. It is only
needed for correcting for gDNA contamination in unstranded RNA-seq data
using the "Global" or the "GC\%" method.}

\item{saf_list}{A list of data frames containing annotation in the SAF
format. It can be an element named saf_list* of the list returned by the
\code{\link[=create_diagnostic_plot]{create_diagnostic_plot()}} function. It is only needed for correcting for
gDNA contamination in unstranded RNA-seq data using the "GC\%" method.}

\item{unstranded_metadata}{A data frame, with column names: sample_name,
group, IR_rate (the percentages of reads mapping to the intergenic region
for all samples), batch if any, and other possible covariates for linear
models used to correct for gDNA contamination. The \emph{sample_name} and
\emph{group} columns contain the unique sample labels and the experimental
conditions for each sample, respectively. The order of the columns
doesn't matter. It can be an element named \emph{metadata} of the list returned
by the \code{\link[=create_diagnostic_plot]{create_diagnostic_plot()}} function. It is only needed for
unstranded RNA-seq data.}

\item{covariates}{A character(n), specifying the names of covariates for
linear models used to correcting for gDNA contamination and other
nuisance paramenters. The names of covariates must be contained in the
column names of the \code{metadata} data frame.}

\item{covariate_types}{A character(n), specifying the data types of
covariates. "numeric" for a quantitative covariate; "categorical" for a
non-quantitative covariate, such as batch information. The length of
\code{covariate_types} must be the same as that of \code{covariates}.}

\item{Ensembl_BSgenome}{An object of the \link[BSgenome:BSgenome-class]{BSgenome::BSgenome} in the
UCSCstyle, which is not avaible from Bioconductor. You can build such a
package using a multi-fasta file for the reference genome of interest
using the \code{\link[=make_BSgenome]{make_BSgenome()}} function.}

\item{UCSC_BSgenome}{An object of the \link[BSgenome:BSgenome-class]{BSgenome::BSgenome} in the UCSC
style, such as BSgenome.Hsapiens.UCSC.hg38.It is only needed for correcting
for gDNA contamination in unstranded RNA-seq data using the "GC\%" method
and a UCSC-style BSgenome is provided as an alternative to building a
BSgenome package from scratch.}

\item{genome_version}{A character(1), specifying the genome version, such as
"GRCh38". Caution: make sure the genome_version here is the same as that
for the \code{\link[=make_ensdb]{make_ensdb()}}. It is only needed for correcting for
gDNA contamination in unstranded RNA-seq data using the "GC\%" method.}

\item{seqname_alias}{A data frame or a tab-delimited file to a data frame,
with two columns: ucsc and ensembl for UCSC-style seqnames
(chromosome/scaffold names) and Ensembl-style seqnames, respectively. It is
only needed for correcting for gDNA contamination in unstranded RNA-seq
data using the "GC\%" method and a UCSC-style BSgenome is provided. All the
chromosomes/scaffolds in the primary reference genome assembly should be
provided in the data frame.}

\item{stranded_metadata}{A data frame or a path to a tab-delimited
text file with column names: \code{salmon_quant_file_strand},
\code{salmon_quant_file_reverse_strand}, \code{sample_name}, and \code{group}. The
\code{salmon_quant_file_strand} and \code{salmon_quant_file_reverse_strand} column
contains the full paths to \code{quant.sf} files for quantitation of gene
expression by Salmon pseudo-alignment with the library strandedness type
set to the true and opposite orientations. See Salmon's description of
library type (\url{https://salmon.readthedocs.io/en/latest/library_type.html})
for details. The \code{sample_name} columns contain the unique sample labels
for each sample. The order of the three columns doesn't matter. It is only
needed for stranded RNA-seq data.}

\item{ensdb_sqlite}{An EnsDb object or a character(1) vector, specifying a
path to an SQLite database for an object of the \link[ensembldb:EnsDb-class]{ensembldb::EnsDb}.
It can be an element named \code{ensdb_sqlite_file} of the list returned by the
\code{\link[=create_diagnostic_plot]{create_diagnostic_plot()}} function. It is needed for the "GC\%" method-
based correction for unstranded RNA-seq data and correction for stranded
RNA-seq data.}
}
\value{
For unstranded RNA-seq datat, it returns a gDNA contamination
corrected count matrix if the "GC\%" or "Global" correction method is
chosen, or a log2CPM matrix if the "IR\%" correction method is used.
For stranded RNA-seq data, it returns a gDNA contamination corrected
count matrix.
}
\description{
Correction for gDNA contamination in stranded RNA-seq data based on the
strandedness information or in the unstranded RNA-seq data using the "GC\%",
"IR\%" or "Global" method.
}
\examples{
\dontrun{
metadata <- read.delim(system.file("extdata",
    "CD1A.RNAseq.metadata.txt",
    package = "CleanUpRNAseq"
))
options(timeout = max(3000, getOption("timeout")))
gtf_url <- paste0(
    "https://ftp.ensembl.org/pub/release-110/gtf/",
    "homo_sapiens/Homo_sapiens.GRCh38.110.gtf.gz"
)
gtf <- basename(gtf_url)
tmp_dir <- tempdir()
retry_download({download.file(
    url = gtf_url,
    destfile = file.path(tmp_dir, gtf),
    mode = "wb"
)})
gtf <- file.path(tmp_dir, gtf)

diagnosis_res <-
    create_diagnostic_plot(
        gtf = gtf,
        metadata = metadata,
        normalization = "DESeq2",
        ensdb_sqlite =
            file.path(tmp_dir, "GRCh38.GTF.EnsDb.sqlite"),
        out_dir = tmp_dir,
        threads = 1
    )
library("BSgenome.Hsapiens.UCSC.hg38")
UCSC_BSgenome <- BSgenome.Hsapiens.UCSC.hg38
sequences_to_keep <- seqnames(UCSC_BSgenome)[!grepl(
    "_(alt|fix|hap\\\\d+)$",
    seqnames(UCSC_BSgenome)
)]
ensembl_chr <- gsub(
    "v", ".",
    gsub(
        "_random$", "",
        gsub("^chr.+?_", "", sequences_to_keep)
    )
)
ensembl_chr <- gsub("^chr", "", gsub("chrM", "chrMT", ensembl_chr))


corrected_expression <-
    correct_for_contamination(
        is_stranded_library = FALSE,
        salmon_summary = diagnosis_res$salmon_summary,
        correction_method = "GC\%",
        featurecounts_summary =
            diagnosis_res$featurecounts_summary,
        saf_list = diagnosis_res$saf_list,
        unstranded_metadata = diagnosis_res$metadata,
        covariates = c("batch", "IR_rate"),
        covariate_types = c("categorical", "numeric"),
        UCSC_BSgenome = UCSC_BSgenome,
        seqname_alias =
            data.frame(
                ucsc = sequences_to_keep,
                ensembl = ensembl_chr
            ),
        ensdb_sqlite = diagnosis_res$ensdb_sqlite_file
    )
}

}
